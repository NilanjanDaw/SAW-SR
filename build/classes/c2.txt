/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shareFile;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.Random;
import org.apache.commons.lang.SerializationUtils;

/**
 *
 * @author Nilanjan
 */
public class FileClient {
    
    public DatagramSocket socket;
    private InetAddress remoteAddress;
    public int port;
    public static int sequenceNo = 0;
    private int pastSequence = -1;
    private DatagramPacket packet;
    public InetAddress ip;
    Random random = new Random();
    
    public void run(String... args) {
         try {
            socket = new DatagramSocket();
            if(args.length > 0) {
                ip = InetAddress.getByName(args[0]);
                port = Integer.parseInt(args[1]);
            } else {
                ip = InetAddress.getByName("127.0.0.1");
                port = Integer.parseInt("8080");
            }
            socket.setSoTimeout(1000);
            System.out.println("Client is connecting to " + ip + ": " + port);
            DatagramPacket request = new DatagramPacket(new byte[0], 0, ip, port);
            socket.send(request);
            while(true) {
                packet = new DatagramPacket(new byte[Constants.PACKET_SIZE], 
                        Constants.PACKET_SIZE
                );
                socket.receive(packet);
                remoteAddress = packet.getAddress();
                System.out.println(remoteAddress.toString());     
                Acknowledge status = printData(packet);
                
                byte[] sendByte = SerializationUtils.serialize(status);
                DatagramPacket sendPacket = new DatagramPacket(sendByte, 
                        sendByte.length,
                        packet.getAddress(),
                        packet.getPort()
                );
                //byte[] data = getFileData(path);
                socket.send(sendPacket);
                if (status.getStatus() == 0) {
                    System.out.println("File Received");
                    break;
                }
            }
        } catch (SocketException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public Acknowledge printData(DatagramPacket dataPacket) throws FileNotFoundException, IOException {
        
        byte[] buf = dataPacket.getData();
        Segment segment = (Segment) SerializationUtils.deserialize(buf);
        
        System.out.println("DataPacket size: " + buf.length + " Sequence No. " + segment.getSequenceNo()
                + " Checksum: " + segment.getCheckSum());
        
        if (segment.getSequenceNo() == -1)
            return new Acknowledge(segment.getSequenceNo(), 0);
        
        if((pastSequence + 1) % Constants.WINDOW_SIZE != segment.getSequenceNo()) {
            System.out.println("Error " + pastSequence + " " + segment.getSequenceNo());
            return new Acknowledge(segment.getSequenceNo(), 400);
        }
        
        /**
         * simulate packet loss   
         */
        if(Math.abs(random.nextDouble()) < 0.3) {
            System.err.println("Error " + pastSequence + " " + segment.getSequenceNo());
            return new Acknowledge(segment.getSequenceNo(), 203);
        }           
        String path = "F:\\JavaLab\\NetworksLabProject\\src\\shareFile\\d.pdf";
        try (BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(path, true))) {
            if(segment.getData().length < Constants.DATA_SIZE)
                System.out.println("Last packet");
            stream.write(segment.getData(), 0, segment.getData().length);
            System.out.println("Size: " + segment.getData().length);
            stream.close();
        }
        pastSequence = segment.getSequenceNo();
        System.out.println("Success: " + pastSequence);
        return new Acknowledge((segment.getSequenceNo() + 1) % Constants.WINDOW_SIZE, 200);
    }
    
    
    
    public static void main(String[] args) {
        FileClient client = new FileClient();
        client.run(args);
    }
}
